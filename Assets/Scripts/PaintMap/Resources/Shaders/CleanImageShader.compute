// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;

[numthreads(8,2,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    //Count how many neighboors are white
	uint v = 0;
	v += step(0.9999,Result[uint2(id.x -1,id.y - 1)].r);
	v += step(0.9999,Result[uint2(id.x,id.y - 1)].r);
	v += step(0.9999,Result[uint2(id.x +1,id.y - 1)].r);
	v += step(0.9999,Result[uint2(id.x -1,id.y)].r);
	v += step(0.9999,Result[uint2(id.x +1,id.y)].r);
	v += step(0.9999,Result[uint2(id.x -1,id.y + 1)].r);
	v += step(0.9999,Result[uint2(id.x,id.y + 1)].r);
	v += step(0.9999,Result[uint2(id.x +1,id.y + 1)].r);
	
	//If at least on neighboors is white, keep the pixel as it is, otherwise turn it black
    Result[id.xy] = Result[id.xy] * step(1,v);
}
